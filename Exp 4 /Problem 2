//Develop a ticket booking system with synchronized threads to ensure no double booking of seats. Use thread priorities to simulate VIP bookings being processed first.
class TicketBookingSystem {
    private int totalSeats = 10; // Assume 10 seats available
    private final Object lock = new Object(); // Lock object for synchronization

    public void bookSeat(String customerType) {
        synchronized (lock) {
            if (totalSeats > 0) {
                totalSeats--;
                System.out.println(customerType + " booked a seat. Remaining seats: " + totalSeats);
            } else {
                System.out.println("No seats available for " + customerType);
            }
        }
    }

    public void vipBooking() {
        bookSeat("VIP");
    }

    // Method to simulate regular bookings
    public void regularBooking() {
        bookSeat("Regular");
    }
}

class BookingThread extends Thread {
    private final TicketBookingSystem system;
    private final String customerType;

    public BookingThread(TicketBookingSystem system, String customerType) {
        this.system = system;
        this.customerType = customerType;
    }

    @Override
    public void run() {
        if (customerType.equals("VIP")) {
            system.vipBooking();  // VIP booking
        } else {
            system.regularBooking();  // Regular booking
        }
    }
}

public class TicketBookingMain {
    public static void main(String[] args) {
        TicketBookingSystem system = new TicketBookingSystem();

        BookingThread vipThread1 = new BookingThread(system, "VIP");
        BookingThread vipThread2 = new BookingThread(system, "VIP");
        BookingThread regularThread1 = new BookingThread(system, "Regular");
        BookingThread regularThread2 = new BookingThread(system, "Regular");
        BookingThread regularThread3 = new BookingThread(system, "Regular");

  
        vipThread1.setPriority(Thread.MAX_PRIORITY);
        vipThread2.setPriority(Thread.MAX_PRIORITY);


        regularThread1.setPriority(Thread.NORM_PRIORITY);
        regularThread2.setPriority(Thread.NORM_PRIORITY);
        regularThread3.setPriority(Thread.NORM_PRIORITY);


        vipThread1.start();
        vipThread2.start();
        regularThread1.start();
        regularThread2.start();
        regularThread3.start();
    }
}
